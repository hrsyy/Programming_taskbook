<HTML> 

<head>
<title>Сортировка массивов и файлов</title>
<meta http-equiv = "content-type" content = "text/html; charset = windows-1251">
<link rel="stylesheet" type="text/css" href="..\files\style.css">
</head>

<body BACKGROUND="../files/foni.gif">
<a name="Glava18"></a>
<A href="../files/oglav.htm">Оглавление</A><BR>
<h2>§18 Сортировка массивов и файлов*</h2>

<ol>
<div>

<a name ="z628"><b>628 </b></a>Рассмотрим массив целых или действительных чисел a<sub>1</sub>, ..., 
a<sub>n</sub>. Пусть требуется переставить элементы этого массива так, чтобы после перестановки они были 
упорядочены по неубыванию: a<sub>1</sub> &#8804; a<sub>2</sub> &#8804; ... &#8804; a<sub>n</sub>. Эта задача 
называется задачей сортировки или упорядочения массива (эту же задачу можно рассматривать применительно к 
упорядочению по невозрастанию: a<sub>1</sub> &#8805; a<sub>2</sub> &#8805; ... &#8805; a<sub>n</sub>; если 
числа попарно различны, то можно говорить об убывании и о возрастании). Для решения этой задачи можно 
воспользоваться, например, следующими алгоритмами:
  <ol><br>
  	а) Найти элемент массива, имеющий наименьшее значение, переставить его с первым элементом,  затем 
		   проделать то же самое, начав со второго элемента и т.д.(Сортировка выбором.)<br><br>
  	б) Последовательным просмотром чисел  a<sub>1</sub>, ..., a<sub>n</sub> найти наименьшее i такое, что 
		   a<sub>i</sub> > a<sub>i + 1</sub>. Поменять a<sub>i</sub> и a<sub>i + 1</sub> местами, возобновить 
			 просмотр с элемента a<sub>i + 1</sub> и т.д. Тем самым наибольшее число передвинется на последнее 
			 место. Следующие просмотры начинать опять сначала, уменьшая на единицу количество просматриваемых 
			 элементов. Массив будет упорядочен после просмотра, в котором участвовали только первый и второй 
			 элеменеы. (Сортировка обменами.)<br><br>
  	в) Просматривать последовательно a<sub>2</sub>, ..., a<sub>n</sub> и каждый новый элемент a<sub>i</sub> 
		   вставлять на подходящее место в уже упорядоченную совокупность  a<sub>i</sub>, ..., a<sub>i-1</sub>. 
			 Это место определяется последовательным сравнением a<sub>i</sub> с упорядоченными элементами 
			 a<sub>1</sub>, a<sub>i-1</sub>. (Сортировка простыми вставками). 
  </ol>
<dl>Написать программы, реализующие алгоритмы а), б), в). </dl><br><br>

<a name ="z629"><b>629 </b></a>Исследовать число сравнений и число перемещений (т.е. перестановок с одного 
места на другое) элементов a<sub>1</sub>, ..., a<sub>n</sub> в процессе применения описанных в предыдущей 
задаче алгоритмов. Показать, что число перемещений для алгоритма сортировки выбором ограничено некоторой 
линейной функцией от n. В это же время и число сравнений для алгоритма сортировки выбором, и обе указанные 
характеристики для алгоритмов сортировки обменами и сортировки простыми вставками в некоторых случаях 
(например, когда исходный массив таков, что a<sub>1</sub> > a<sub>2</sub> >... >a<sub>n</sub>) являются 
квадратичными функциями от n.<br><br>

<a name ="z630"><b>630 </b></a>Из утверждения предыдущей задачи следует, что алгоритм сортировки выбором 
выгодно отличается от алгоритмов сортировки обменами и сортировки простыми вставками в тех случаях, когда 
перемещение элемента оказывается существенно более сложным делом, чем сравнение элементов. Использовать это 
при выполнении следующих заданий.<br><dl>Дана действительная матрица размера 
<i>n x m</i>;  упорядочить (переставить) строки матрицы:</dl>
  <ol>
	  а) по неубыванию значений первых элементов строк; <br>
  	б) по невозрастанию сумм элементов строк; <br>
  	в) по неубыванию значений наименьших элементов строк; <br>
  	г) по невозрастанию значений наибольших элементов строк.
  </ol>
<dl>В заданиях б),  в),  г) разрешается дополнительно определить числовой 
массив a<sub>1</sub>, ..., a<sub>n</sub>.</dl><br><br>

<a name ="z631"><b>631 </b></a>Пусть дан упорядоченный по неубыванию массив целых или действительных чисел  
a<sub>1</sub> &#8804; a<sub>2</sub> &#8804; ... &#8804; a<sub>n</sub>   и пусть дано некоторое число b 
(соответственно целое или действительное), для которого нужно найти такое место среди чисел a<sub>1</sub>, 
..., a<sub>n</sub>, чтобы после вставки числа b на это место упорядоченность не нарушилась. Если вследствие 
равенства между собой некоторых элементов массива число b можно вставлять на разные места,  то требуется 
определить ближайшее к началу массива место. Эта задача называется задачей поиска места элемента. Для b 
имеется n + 1 возможность: b  &#8804;  a<sub>1</sub>,  a<sub>1</sub> < b  &#8804;  a<sub>2</sub>, ..., 
a<sub>n-1</sub> < b  &#8804;  a<sub>n</sub>,  a<sub>n</sub>  < b,  и решением задачи поиска места элемента 
b будет соответственно одно из чисел 1, ..., n + 1. Для решения задачи полезен алгоритм, который называется 
алгоритмом деления пополам: взять первоначально 1 и n + 1 в качестве границ поиска места элемента;  далее, 
до тех пор,  пока границы не совпадут, шаг за шагом сдвигать эти границы следующим образом: сравнить b с 
a<sub>s</sub>,  где s-целая часть среднего арифметического границ;  если  a<sub>s</sub> < b, то заменить 
прежнюю нижнюю границу на s + 1,  а верхнюю оставить без изменения, иначе оставить без изменения нижнюю 
границу,  а верхнюю заменить на s;  когда границы совпадут,  став равным некоторому числу t,  выполнение 
вышеописанного алгоритма закончится с результатом t. (Число сравнений,  требуемых этим алгоритмом,  не 
превосходит [log<sub>2</sub>(n + 1)] + 1).
  <ol>
  	а) Даны действительные числа a<sub>1</sub>, ..., a<sub>n</sub>,   b<sub>1</sub>, ..., b<sub>m</sub>
		   (a<sub>1</sub> &#8804; a<sub>2</sub> &#8804; ... &#8804; a<sub>n</sub>). Получить натуральные числа 
			 k<sub>1</sub>, ..., k<sub>m</sub> такие,  что k<sub>i</sub>-это решение задачи поиска места 
			 b<sub>i</sub> среди a<sub>1</sub>, ..., a<sub>n</sub> (i = 1, ..., m). Применить алгоритм деления пополам.<br>
  	б) Таблица выигрышей денежной лотереи представлена массивом выигравших номеров a<sub>1</sub>, ..., 
       a<sub>n</sub> и массивом выигрышей в рублях p<sub>1</sub>, ..., p<sub>n</sub> (p<sub>i</sub>-это выигрыш, 
			 выпавший на номер a<sub>i</sub> (i = 1, ..., n)). Определить суммарный выигрыш,  выпавший на билеты с 
			 номерами b<sub>1</sub>, ..., b<sub>m</sub>. Применить алгоритм деление пополам.<br>
  	в) Пусть место некоторого числа b среди упорядоченных по неубыванию a<sub>1</sub>, ..., a<sub>n</sub> 
    	 выбирается как наиболее удаленное от начала последовательности место,  на которое можно вставить 
			 это число,  не нарушая этим упорядоченности по неубыванию. Внести изменение в описание алгоритма 
			 деления пополам и соответственно дать новое решение задания а), сформулированного выше.
  </ol>
<br>

<a name ="z632"><b>632 </b></a>Даны действительные числа a<sub>1</sub>, ..., a<sub>n</sub>, p, натуральное 
число k (a<sub>1</sub> &#8804; a<sub>2</sub> &#8804; ... &#8804; a<sub>n</sub>, k &#8804; n). Удалить из  
a<sub>1</sub>, ..., a<sub>n</sub> элемент с номером k (т.е. a<sub>k</sub>) и вставить элемент, равный p, так, 
чтобы не нарушилась упорядоченность.<br><br>

<a name ="z633"><b>633 </b></a>Алгоритм упорядочения простыми вставками (см. алгоритм в) в задаче 628) можно 
изменить следующим образом: место, на которое надо вставить a<sub>i</sub> в уже упорядоченную совокупность 
a<sub>i</sub>, ..., a<sub>i-1</sub>, определяется алгоритмом деления пополам (см. задачу 631). Получится новый 
алгоритм сортировки,  который называется алгоритмом сортировки бинарными вставками (слова"бинарная вставка" 
следует понимать как "вставка делением пополам"). Этот алгоритм требует всего около <i>n log<sub>2</sub>n</i> 
сравнением элементов. Написать программу,  реализующую этот алгоритм.<br><br>

<a name ="z634"><b>634 </b></a>Даны целые числа a<sub>1</sub>, ..., a<sub>n</sub>. Получить в порядке 
возрастания все различные числа, входящие в a<sub>1</sub>, ..., a<sub>n</sub>. Здесь удобно воспользоваться 
алгоритмом сортировки вставками (если n велико, то лучше применить бинарные вставки;  если n сравнительно 
мало, скажем, n<50, то можно обойтись и простыми вставками). В процессе сортировки следует отбрасывать 
элементы, уже встречавшиеся раньше. Если в результате поиска места a<sub>i</sub> в упорядоченной совокупности  
a<sub>1</sub>, ..., a<sub>k</sub> (k < i) обнаружится,  что среди a<sub>1</sub>, ..., a<sub>k</sub> есть 
элемент,  равный  a<sub>i</sub>, то следует перейти к рассмотрению a<sub>i + 1</sub> без изменения 
a<sub>1</sub>, ..., a<sub>k</sub>.<br><br>

<a name ="z635"><b>635 </b></a>Даны действительные числа c<sub>1</sub>, ..., c<sub>p</sub>, d<sub>1</sub>, ..., 
d<sub>g</sub>(c<sub>1</sub> &#8804; c<sub>2</sub> &#8804; ... &#8804; c<sub>p</sub>, d<sub>1</sub> &#8804; 
d<sub>2</sub> &#8804; ... &#8804; d<sub>g</sub>). Внести единую упорядоченность в  c<sub>1</sub>, ..., 
c<sub>p</sub>, d<sub>1</sub>, ..., d<sub>g</sub>, получив f<sub>1</sub>, f<sub>2</sub>, ..., f<sub>p + 
g</sub> такие,  что f<sub>1</sub> &#8804; f<sub>2</sub> &#8804; ... &#8804; f<sub>p + g</sub>. Число сравнений 
не должно превосходить p + g.<br><br>

<a name ="z636"><b>636 </b></a>Алгоритм фон Неймана упорядочения массива  a<sub>1</sub>, ..., a<sub>n</sub> по неубыванию  (алгоритм сортировки слияниями) основан на многократных слияниях уже упорядоченных групп элементов массива (см. предыдущую задачу). В начале весь массив рассматривается как совокупность упорядоченных групп по одному элементу в каждом. Слиянием соседних групп получаем упорядоченные группы, каждая из которых содержит два элемента (кроме, может быть,  последней группы, которой не нашлось парной). Далее, упорядоченные группы укрупняются тем же способом и т. д. Здесь приходится оперировать не только с массивом   a<sub>1</sub>, ..., a<sub>n</sub>, но и с вспомогательным массивом b<sub>1</sub>, ..., b<sub>n</sub> (первоначальные значения его элементов  не играют роли). Рис. 34 демонстрирует два последовательных этапа укрупнения: массивы a<sub>1</sub>, ..., a<sub>n</sub> и b<sub>1</sub>, ..., b<sub>n</sub> представлены в виде отрезков,  которые разбиты на части, изображающие упорядоченные группы. Число упорядоченных групп убывает, следовательно, настанет такой момент,  когда в массиве a<sub>1</sub>, ..., a<sub>n</sub> или b<sub>1</sub>, ..., b<sub>n</sub> будет содержаться только одна упорядоченная группа. А это означает,  что массив упорядочен. Для слияния двух упорядоченных групп, содержащих соответственно p и g элементов, достаточно произвести не более p + g сравнений. Следовательно, для одного этапа укрупнения достаточно произвести не более n сравнений. Столько же требуется на одном этапе и перемещений. Можно показать, что алгоритм фон Неймана требует в целом приблизительно <i>n log<sub>2</sub>n</i> сравнений и столько же перемещений. Из рассмотренных до сих пор алгоритмов только алгоритм сортировки бинарными вставками требовал столь небольшого числа сравнений. Онако алгоритм фон Неймана выгодно отличается от последнего алгоритма тем, что требует меньше перемещений элементов a<sub>1</sub>, ..., a<sub>n</sub> (хотя и требует дополнительного массива b<sub>1</sub>, ..., b<sub>n</sub>). Написать программу, реализующую алгоритм фон Неймана.<p align="center"><img src="image02.jpg"></p>

<a name ="z637"><b>637 </b></a>Пусть дан массив a<sub>1</sub>, ..., a<sub>n</sub>. Требуется переставить 
a<sub>1</sub>, ..., a<sub>n</sub> так, чтобы вначале в массиве шла группа элементов, больших того элемента,  
который в исходном массиве располагается на первом месте,  затем-сам этот элемент,  потом-группа элементов, 
меньших или равных ему. Число сравнений и перемещений, каждое в отдельности,  не должно превышать n-1.<br><br>

<a name ="z638"><b>638 </b></a>На преобразовании массива, описанном в предыдущей задаче, основывается следующий 
рекурсивный алгоритм сортировки (так называемая быстрая сортировка). Если массив содержит не более одного 
элемента, то он упорядочен. Иначе применяем к нему преобразование, описанное в предыдущей задаче, и определяем 
результат применения алгоритма быстрой сортировки к a<sub>1</sub>, ..., a<sub>n</sub> следующим образом: 
вначале идет первая группа элементов, упорядоченная с помощью алгоритма быстрой сортировки, затем без изменения 
тот элемент, который разделял первую и вторую группы элементов,  затем вторая группа элементов,  упорядоченная 
с помощью алгоритма быстрой сортировки. Этот алгоритм не использует дополнительного массива и требует в среднем 
приблизительно <i>nlog<sub>2</sub>n</i> сравнений и столько же перемещений элементов. Правда,  это лишь среднее 
число: в худшем случае число соавнений может достигать n(n-1)/2;  кроме того,  алгоритм быстрой сортировки 
содержит рекурсии.<br> Написать программу,  реализующую алгоритм быстрой сортировки.<br><br>

<a name ="z639"><b>639 </b></a>На преобразовании массива,  описанном в задаче 637,  основывается также 
следующий алгоритм поиска значения k-го по величине элемента массива a<sub>1</sub>, ..., a<sub>n</sub> 
(т. е. того элемента,  который бы занял место с номером k после упорядочения массива). Пусть в результате 
преобразования,  описанного в задаче 637,  первый элемент занял p-е место;  если k = p,  то поиск закончен;  
если k < p,  то надо перейти к поиску k - го по величине элемента в начальной группе элементов,  содержащей 
p-1 элемент (задача упростилась,  так как p - 1 < n);  если же k > p,  то надо перейти к поиску (k - p) - го 
по величине элемента во второй группе элементов (задача упростилась,  так как n - p < n). Этот алгоритм не 
содержит рекурсий. Не пользуясь рекурсиями,  написать программу,  реализующую этот алгоритм.<br><br>

<a name ="z640"><b>640 </b></a>Нетрудно заметить,  что алгоритм,  описанный в предыдущей задаче,  фактически 
позволяет найти не только k-й по величине элемент,  но и дополнительно 1 - й,  2 - й, ...,  (k - 1) - й  
элементы,  хотя и в неупорядоченном виде. Основываясь на этом,  выполнить следующие задания :
  <ol>
	  а) В массиве a<sub>1</sub>, ..., a<sub>2m + 1</sub> найти (m  +  1) - й по величине элемент (это так 
		   называемая медиана массива a<sub>1</sub>, ..., a<sub>2m + 1</sub>) и группу элементов с первыми 
			 m значениями.<br>
		б) Вновь решить задачу 170,  положив для этого k = 4. 
	</ol>
<br>

<a name ="z641"><b>641 </b></a>Алгоритм сортировки обменами (см. алгоритм б) в задаче 628) также имеет свои 
достоинства. Рассмотрим следующий пример. Пусть слова,  которые можно выделить в массиве символов 
a<sub>1</sub>, ..., a<sub>n</sub> (см. задачу 269),  требуется представить в лексикографическом порядке. 
Так как разные слова могут иметь разную длину,  то без больших затруднений можно менять местами только слова,  
стоящие рядом. Но алгоритм сортировки обменами и предписывает только такие обмены. Эта задача не является,  
конечно,  задачей сортировки массива,  но тем не менее алгоритм сортировки обменами оказывается здесь полезным. 
Написать программу,  предполагая,  что длина слова не превосходит пятнадцати.<br><br>

<a name ="z642"><b>642 </b></a>Алгоритм б),  сформулированный в задаче 628 ,  - это,  строго говоря,  лишь 
один из алгоритмов сортировки обменами. Он иногда называется алгоритмом пузырька. Есть и другие алгоритмы,  
которые естественно отнести к алгоритмам сортировки обменами. Приведем пример такого алгоритма. 
Последовательным просмотром чисел  a<sub>1</sub>, ..., a<sub>n</sub> найти наименьшее i такое,  
что a<sub>i</sub> >  a<sub>i + 1</sub>. Поменять a<sub>i</sub> и  a<sub>i + 1</sub> местами и возобновить 
просмотр с начала массива. Когда не удастся найти такое i,  массив будет упорядочен нужным образом. 
Написать программу,  реализующую этот алгоритм.<br><br>

<a name ="z643"><b>643 </b></a>Рассмотреть все алгоритмы сортировки,  сформулированные в этом параграфе,  
и указать достоинства и недостатки кажлого из них. Необходимо помнить,  что в случае небольших массивов 
те алгоритмы,  которые сформулировнны в задаче 628,  дают вполне удовлетворительное решение задачи. При 
больших n требуется тщательно изучить все особенности конкретной ситуации и, исходя  из этого,  подобрать 
алгоритм. Задачи сортировки массивов возникают не только в связи с числовыми массивами. Тип элементами 
может быть довольно сложным,  и надо учитывать,  во что обходится сравнение и перемещение элементов в том 
или ином случае.<br><br>

<a name ="z644"><b>644 </b></a>Даны пять попарно различных чисел a,  b,  c,  d,  e. Упорядочить их по 
возрастанию, используя для этого не более семи сравнений.<br><br>

<a name ="z645"><b>645 </b></a>Даны действительные числа a<sub>1</sub>, ..., a<sub>n</sub>. Получить попарно 
различные целые i<sub>1</sub>, ..., i<sub>n</sub> такие,  что 1  &#8804;  i<sub>k</sub>  &#8804;  n,  k = 1, ...,  
n и a<sub>i1</sub> &#8805; a<sub>i2</sub> &#8805; ... &#8805; a<sub>in</sub>.<br><br>

<a name ="z646"><b>646 </b></a>Даны натуральное число n,  целые числа a<sub>1</sub>, ..., a<sub>n</sub>. 
Найти наибольшее значение,  встречающееся в последовательности   a<sub>1</sub>, ..., a<sub>n</sub>,  после 
выбрасывания из нее
  <ol>
	  а) одного из членов со значением max (a<sub>1</sub>, ..., a<sub>n</sub>);<br>
		б) всех членов со значением  max (a<sub>1</sub>, ..., a<sub>n</sub>) - здесь предполагается,  
		   что не все числа  a<sub>1</sub>, ..., a<sub>n</sub> равны между собой.
	</ol>
<br>

<a name ="z647"><b>647 </b></a>Даны натуральное число n,  действительные числа a<sub>1</sub>, ..., a<sub>n</sub>. 
Требуется найти max (a<sub>1</sub>, ..., a<sub>n</sub>) и min (a<sub>1</sub>, ..., a<sub>n</sub>). Рассмотрим 
два алгоритма решения этой задачи. Первый алгоритм. Шаг за шагом получить пары  max (a<sub>1</sub>, ..., 
a<sub>i</sub>),  min (a<sub>1</sub>, ..., a<sub>i</sub>) (i = 1, ...,  n). При этом,  чтобы получить   
max (a<sub>1</sub>, ..., a<sub>i + 1</sub>),  min (a<sub>1</sub>, ..., a<sub>i + 1</sub>),  сравнивается 
a<sub>i + 1</sub> с   max (a<sub>1</sub>, ..., a<sub>i</sub>),  а затем,  если a<sub>i + 1</sub> <  
max (a<sub>1</sub>, ..., a<sub>i</sub>),  дополнительно сравнивается a<sub>i + 1</sub> с  min 
(a<sub>1</sub>, ..., a<sub>i</sub>). Второй алгоритм. Пусть n - четное число,  т.е. n = 2k. Тогда шаг за 
шагом получать max (a<sub>1</sub>, ..., a<sub>2<i>l</i></sub>),   min (a<sub>1</sub>, ..., a<sub>2<i>l</i></sub>) 
(<i>l</i> = 1, ...,  k). При этом,  чтобы получить  max (a<sub>1</sub>, ..., a<sub>2<i>l</i> + 2</sub>),   
min (a<sub>1</sub>, ..., a<sub>2<i>l</i> + 2</sub>),  вначале сравниваются между собой a<sub>2<i>l</i> + 1</sub>,  
a<sub>2<i>l</i> + 2</sub> и max (a<sub>2<i>l</i> + 1</sub>,  a<sub>2<i>l</i> + 2</sub>) сравнивается с 
max (a<sub>1</sub>, ..., a<sub>2<i>l</i></sub>),  а min(a<sub>2<i>l</i> + 1</sub>,  a<sub>2<i>l</i> + 2</sub>) - 
с  min (a<sub>1</sub>, ..., a<sub>2<i>l</i></sub>). Если n -нечетное число,  то потребуется еще дополнительный шаг: 
сравнение последнего элемента и a<sub>n</sub> с  max (a<sub>1</sub>, ..., a<sub>n-1</sub>) и, возможно, с 
min (a<sub>1</sub>, ..., a<sub>n-1</sub>).<br><dl>Сколько сравнений в худшем 
случае потребует первый алгоритм и сколько - второй? Написать прграмму,  реализующую второй алгоритм. 
(Заметим,  что второй алгоритм дает еще одно решение задачи 230.)</dl><br><br>

<a name ="z648"><b>648 </b></a>Даны натуральные числа a<sub>1</sub>, ..., a<sub>n</sub>. Пусть 
a<sub>1</sub>, ..., a<sub>n</sub> - перестановка чисел 1, ...,  n. Получить натуральные 
r<sub>1</sub>, ..., r<sub>n</sub> такие,  что r<sub>a<sub>i</sub></sub> = i для i = 1, ...,  n.<br><br>

<a name ="z649"><b>649 </b></a>Решить задачи 646,  647,  предполагая,  что числа a<sub>1</sub>, ..., 
a<sub>n</sub> являются компонентами данного файла. При этом значение n неизвестно заранее.<br><br>

<a name ="z650"><b>650 </b></a>Число компонент файла f,  компонентами которого являются целые числа,  
кратно десяти. Переписать компоненты файла f в файл q,  изменяя порядок чисел в каждой десятке так,  чтобы 
  <ol>
    а) вначале шли отрицательные числа десятки,  а за ними - неотрицательные;<br>
		б) вначале шли числа,  делящиеся на 3,  затем числа,  дающие при делении на 3 остаток 1,  затем 
		   числа,  дающие при делении на 3 остаток 2. 
	</ol>
<dl>Порядок самих десяток должен быть сохранен.</dl><br><br>

<a name ="z651"><b>651 </b></a>Рассматриваются слова (см. задачу 269),  содержащиеся в символьных файлах 
f<sub>1</sub> и f<sub>2</sub>. Известно,  что число символов в словах не превосходит шестнадцати. Известно 
также,  что слова в файле  f<sub>2</sub> идут в лексикографическом порядке и их число равно пятидесяти. 
Выяснить,  сколько раз каждое из слов файла  f<sub>2</sub> встречается в файле f<sub>1</sub>. Для решения 
задачи переписать слова,  содержащиеся в файле f<sub>2</sub>,  в массив и последовательно применять метод 
деления пополам (см. задачу 631).<br><br>

<a name ="z652"><b>652 </b></a>Пусть файлы c и d с компонентами,  являющимися действительными или целыми 
числами,  упорядочены по невозрастанию компонент. Требуется собрать компоненты файлов  c и d в упорядоченном 
виде в файле f (ср. c задачей 635). Количество сравнений не должно превосходить p + g,  где p и g - число 
компонент в файлах  c и d.<br><br>

<a name ="z653"><b>653 </b></a>Пусть a и b - файлы,  k - натуральное число. Будем говорить,  что файлы a и b 
согласованно k - упорядочены,  если 
  <ol>
	  1) в каждом из файлов a и b  первые k компонент,  следуящие за ними k компонент и т.д. образуют 
		   упорядоченные группы;  последняя группа файла (тоже упорядоченная) может быть неполной,  т.е. 
			 содержать  менее  k компонент,  но при этом только один из файлов a и b может иметь не полную 
			 последнюю группу;<br>
		2) число упорядоченных групп файла a отличается от числа упорядоченных групп файла b не более чем 
		   на единицу;<br>
		3) если в одном файле число упорядоченных групп меньше на единицу,  чем в другом,  то не полной может 
		   быть только последняя группа более длинного файла.
	</ol>
<dl>Компоненты двух согласованно k - упорядоченных файлов a и b можно 
разместить в файлах g и h так,  что g и h,  будут согласованно 2k - упорядочены. Это делается с помощью 
описанных в предыдущей задаче слияний;  при этом результаты слияния попеременно размещаются то в файле g,  
то в файле h. Рисунок 35 демонстрирует происходящее при первых двух слияниях. Файлы представлены в виде 
отрезков,  части которых изображают упорядоченные группы с указанным числом компонент.</dl><br><dl>
Завершить описание этого алгоритма, рассмотрев его заключительную стадию. Доказать,  
что файлы g и h действительно будут согласованно 2k - упорядоченны. Реализовать этот алгоритм в виде 
программы.</dl><p align="center"><img src="image01.jpg"></p>

<a name ="z654"><b>654 </b></a>Для сортировки файла g может быть применён следующий алгоритм. Пусть h,  a,  b 
- вспомогательные файлы. Прежде всего компоненты файла g распределяются по файлам a,  b : компоненты с 
чётными номерами попадают в a,  а компоненты снечётными номерами - в b. Эти компоненты рассматриваются 
как упорядоченные группы,  по одной компоненте в каждой,  а файлы a,  b - как согласованно 1 - упорядоченные 
(см. предыдущую задачу). Затем с помощью алгоритма,  описанного в предыдущей задаче,  файлы g и h превращаются 
в согласованно 2 - упорядоченные и т. д. Так как число упорядоченных групп убывает с каждым с каждым применением 
предложенного в предыдущей задаче алгоритма, то настанет такой момент, когда все компоненты собирутся в некотором 
файле в виде одной упорядоченной группы; на этом упорядочение будет закончено.<br><dl>Этот алгоритм очень похож 
на алгоритм фон Неймана для массивов (см. задачу <a href="../Glava18/index18.htm#z636">636</a>) и тоже относится к 
алгоритмам сортировки слияниями.</dl><dl>Реализовать этот алгоритм в виде программы.</dl><br><br>

<a name ="z655"><b>655 </b></a>Пусть файлы а и b, компоненты которых являются целыми числами, упорядочены по 
неубыванию. Получить в файле с все числа файлов а и b без повторений. Файл с должен быть упорядочен по 
возрастанию.<br><br>

<a name ="z656"><b>656 </b></a>Дан файл f, компоненты которого являются целыми числами. Получить в файле 
g все нечётные числа, входящие в файл f. Числа в файле g должны следовать:<br>
  <ol>
  	а) в порядке невозрастания;<br>
  	б) в порядке убывания, без повторений.
  </ol>
<br>

<a name ="z657"><b>657 </b></a>Дан символьный файл f, компоненты которого - малые латинские буквы и пробелы. 
Слова (см. задачу <a href="../Glava08/index08.htm#z269">269</a>) файла f имеют не более шестнадцати букв. 
Записать эти слова в файл g в лексикографическом порядке.<br><br>
<hr>
* В задачах 628 - 648 этого параграфа существенно,  что данные рассматриваются в программе как массив;  
в задачах 649 - 657 рассматриваются файлы,  и это усложняет некоторые алгоритмы.
</div>
</ol>

<table noborder width="100%">
 <tr>
  <td align="left">  <font size="5"><a href="..\glava17\index17.htm#Glava17"><img border="0" src="..\files\arrow_l.gif">Предыдущая глава</a></font></td>
  <td align="center"><font size="5"><a href="#Glava18">К началу</a></font></td>
  <td align="right"> <font size="5"><a href="..\glava19\index19.htm#Glava19">Следующая глава<img border="0" align="middle" src="..\files\arrow_r.gif"></a></font></td>
 </tr>
</table>

</body>
</HTML>